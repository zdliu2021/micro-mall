// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: mall-demo/micro-mall-api/proto/micro-mall-auth-server/auth_server.proto

package proto_auth_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServerRpcClient is the client API for AuthServerRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServerRpcClient interface {
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	OAuthGitteSuccess(ctx context.Context, in *OAuthGitteSuccessRequest, opts ...grpc.CallOption) (*OAuthGitteSuccessResponse, error)
}

type authServerRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServerRpcClient(cc grpc.ClientConnInterface) AuthServerRpcClient {
	return &authServerRpcClient{cc}
}

func (c *authServerRpcClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error) {
	out := new(SendCodeResponse)
	err := c.cc.Invoke(ctx, "/auth_server.AuthServerRpc/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerRpcClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth_server.AuthServerRpc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerRpcClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth_server.AuthServerRpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerRpcClient) OAuthGitteSuccess(ctx context.Context, in *OAuthGitteSuccessRequest, opts ...grpc.CallOption) (*OAuthGitteSuccessResponse, error) {
	out := new(OAuthGitteSuccessResponse)
	err := c.cc.Invoke(ctx, "/auth_server.AuthServerRpc/OAuthGitteSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServerRpcServer is the server API for AuthServerRpc service.
// All implementations must embed UnimplementedAuthServerRpcServer
// for forward compatibility
type AuthServerRpcServer interface {
	SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	OAuthGitteSuccess(context.Context, *OAuthGitteSuccessRequest) (*OAuthGitteSuccessResponse, error)
	mustEmbedUnimplementedAuthServerRpcServer()
}

// UnimplementedAuthServerRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServerRpcServer struct {
}

func (UnimplementedAuthServerRpcServer) SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedAuthServerRpcServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServerRpcServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServerRpcServer) OAuthGitteSuccess(context.Context, *OAuthGitteSuccessRequest) (*OAuthGitteSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthGitteSuccess not implemented")
}
func (UnimplementedAuthServerRpcServer) mustEmbedUnimplementedAuthServerRpcServer() {}

// UnsafeAuthServerRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServerRpcServer will
// result in compilation errors.
type UnsafeAuthServerRpcServer interface {
	mustEmbedUnimplementedAuthServerRpcServer()
}

func RegisterAuthServerRpcServer(s grpc.ServiceRegistrar, srv AuthServerRpcServer) {
	s.RegisterService(&AuthServerRpc_ServiceDesc, srv)
}

func _AuthServerRpc_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerRpcServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_server.AuthServerRpc/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerRpcServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServerRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_server.AuthServerRpc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerRpcServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServerRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_server.AuthServerRpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerRpcServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServerRpc_OAuthGitteSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthGitteSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerRpcServer).OAuthGitteSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_server.AuthServerRpc/OAuthGitteSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerRpcServer).OAuthGitteSuccess(ctx, req.(*OAuthGitteSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServerRpc_ServiceDesc is the grpc.ServiceDesc for AuthServerRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServerRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_server.AuthServerRpc",
	HandlerType: (*AuthServerRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCode",
			Handler:    _AuthServerRpc_SendCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthServerRpc_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthServerRpc_Login_Handler,
		},
		{
			MethodName: "OAuthGitteSuccess",
			Handler:    _AuthServerRpc_OAuthGitteSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall-demo/micro-mall-api/proto/micro-mall-auth-server/auth_server.proto",
}
