// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: mall-demo/micro-mall-api/proto/micro-mall-member-proto/member.proto

package proto_member

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberRpcClient is the client API for MemberRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberRpcClient interface {
	// memberLevel
	GetMemberLevelList(ctx context.Context, in *GetMemberLevelListRequest, opts ...grpc.CallOption) (*GetMemberLevelListResponse, error)
	SaveMemberLevel(ctx context.Context, in *SaveMemberLevelRequest, opts ...grpc.CallOption) (*SaveMemberLevelResponse, error)
	UpdateMemberLevel(ctx context.Context, in *UpdateMemberLevelRequest, opts ...grpc.CallOption) (*UpdateMemberLevelResponse, error)
	DeleteMemberLevel(ctx context.Context, in *DeleteMemberLevelRequest, opts ...grpc.CallOption) (*DeleteMemberLevelResponse, error)
	// micro-mall-micro-mall-member-proto
	GetMemberList(ctx context.Context, in *GetMemberListRequest, opts ...grpc.CallOption) (*GetMemberListResponse, error)
	SaveMember(ctx context.Context, in *SaveMemberRequest, opts ...grpc.CallOption) (*SaveMemberResponse, error)
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
}

type memberRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberRpcClient(cc grpc.ClientConnInterface) MemberRpcClient {
	return &memberRpcClient{cc}
}

func (c *memberRpcClient) GetMemberLevelList(ctx context.Context, in *GetMemberLevelListRequest, opts ...grpc.CallOption) (*GetMemberLevelListResponse, error) {
	out := new(GetMemberLevelListResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/GetMemberLevelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) SaveMemberLevel(ctx context.Context, in *SaveMemberLevelRequest, opts ...grpc.CallOption) (*SaveMemberLevelResponse, error) {
	out := new(SaveMemberLevelResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/SaveMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) UpdateMemberLevel(ctx context.Context, in *UpdateMemberLevelRequest, opts ...grpc.CallOption) (*UpdateMemberLevelResponse, error) {
	out := new(UpdateMemberLevelResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/UpdateMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) DeleteMemberLevel(ctx context.Context, in *DeleteMemberLevelRequest, opts ...grpc.CallOption) (*DeleteMemberLevelResponse, error) {
	out := new(DeleteMemberLevelResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/DeleteMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) GetMemberList(ctx context.Context, in *GetMemberListRequest, opts ...grpc.CallOption) (*GetMemberListResponse, error) {
	out := new(GetMemberListResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/GetMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) SaveMember(ctx context.Context, in *SaveMemberRequest, opts ...grpc.CallOption) (*SaveMemberResponse, error) {
	out := new(SaveMemberResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/SaveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error) {
	out := new(UpdateMemberResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRpcClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, "/proto.MemberRpc/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberRpcServer is the server API for MemberRpc service.
// All implementations must embed UnimplementedMemberRpcServer
// for forward compatibility
type MemberRpcServer interface {
	// memberLevel
	GetMemberLevelList(context.Context, *GetMemberLevelListRequest) (*GetMemberLevelListResponse, error)
	SaveMemberLevel(context.Context, *SaveMemberLevelRequest) (*SaveMemberLevelResponse, error)
	UpdateMemberLevel(context.Context, *UpdateMemberLevelRequest) (*UpdateMemberLevelResponse, error)
	DeleteMemberLevel(context.Context, *DeleteMemberLevelRequest) (*DeleteMemberLevelResponse, error)
	// micro-mall-micro-mall-member-proto
	GetMemberList(context.Context, *GetMemberListRequest) (*GetMemberListResponse, error)
	SaveMember(context.Context, *SaveMemberRequest) (*SaveMemberResponse, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	mustEmbedUnimplementedMemberRpcServer()
}

// UnimplementedMemberRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMemberRpcServer struct {
}

func (UnimplementedMemberRpcServer) GetMemberLevelList(context.Context, *GetMemberLevelListRequest) (*GetMemberLevelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberLevelList not implemented")
}
func (UnimplementedMemberRpcServer) SaveMemberLevel(context.Context, *SaveMemberLevelRequest) (*SaveMemberLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMemberLevel not implemented")
}
func (UnimplementedMemberRpcServer) UpdateMemberLevel(context.Context, *UpdateMemberLevelRequest) (*UpdateMemberLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberLevel not implemented")
}
func (UnimplementedMemberRpcServer) DeleteMemberLevel(context.Context, *DeleteMemberLevelRequest) (*DeleteMemberLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLevel not implemented")
}
func (UnimplementedMemberRpcServer) GetMemberList(context.Context, *GetMemberListRequest) (*GetMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberList not implemented")
}
func (UnimplementedMemberRpcServer) SaveMember(context.Context, *SaveMemberRequest) (*SaveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMember not implemented")
}
func (UnimplementedMemberRpcServer) UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberRpcServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberRpcServer) mustEmbedUnimplementedMemberRpcServer() {}

// UnsafeMemberRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberRpcServer will
// result in compilation errors.
type UnsafeMemberRpcServer interface {
	mustEmbedUnimplementedMemberRpcServer()
}

func RegisterMemberRpcServer(s grpc.ServiceRegistrar, srv MemberRpcServer) {
	s.RegisterService(&MemberRpc_ServiceDesc, srv)
}

func _MemberRpc_GetMemberLevelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberLevelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).GetMemberLevelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/GetMemberLevelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).GetMemberLevelList(ctx, req.(*GetMemberLevelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_SaveMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMemberLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).SaveMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/SaveMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).SaveMemberLevel(ctx, req.(*SaveMemberLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_UpdateMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).UpdateMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/UpdateMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).UpdateMemberLevel(ctx, req.(*UpdateMemberLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_DeleteMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).DeleteMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/DeleteMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).DeleteMemberLevel(ctx, req.(*DeleteMemberLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_GetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).GetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/GetMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).GetMemberList(ctx, req.(*GetMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_SaveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).SaveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/SaveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).SaveMember(ctx, req.(*SaveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRpc_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRpcServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemberRpc/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRpcServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberRpc_ServiceDesc is the grpc.ServiceDesc for MemberRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MemberRpc",
	HandlerType: (*MemberRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMemberLevelList",
			Handler:    _MemberRpc_GetMemberLevelList_Handler,
		},
		{
			MethodName: "SaveMemberLevel",
			Handler:    _MemberRpc_SaveMemberLevel_Handler,
		},
		{
			MethodName: "UpdateMemberLevel",
			Handler:    _MemberRpc_UpdateMemberLevel_Handler,
		},
		{
			MethodName: "DeleteMemberLevel",
			Handler:    _MemberRpc_DeleteMemberLevel_Handler,
		},
		{
			MethodName: "GetMemberList",
			Handler:    _MemberRpc_GetMemberList_Handler,
		},
		{
			MethodName: "SaveMember",
			Handler:    _MemberRpc_SaveMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _MemberRpc_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MemberRpc_DeleteMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall-demo/micro-mall-api/proto/micro-mall-member-proto/member.proto",
}
