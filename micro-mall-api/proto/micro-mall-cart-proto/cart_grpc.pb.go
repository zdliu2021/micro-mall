// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: mall-demo/micro-mall-api/proto/micro-mall-cart-proto/cart.proto

package proto_cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartRpcClient is the client API for CartRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartRpcClient interface {
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	GetCartItem(ctx context.Context, in *GetCartItemRequest, opts ...grpc.CallOption) (*GetCartItemResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error)
	ClearCartInfo(ctx context.Context, in *ClearCartInfoRequest, opts ...grpc.CallOption) (*ClearCartInfoResponse, error)
	CheckItem(ctx context.Context, in *CheckItemRequest, opts ...grpc.CallOption) (*CheckItemResponse, error)
	ChangeItemCount(ctx context.Context, in *ChangeItemCountRequest, opts ...grpc.CallOption) (*ChangeItemCountResponse, error)
	DeleteIdCartInfo(ctx context.Context, in *DeleteIdCartInfoRequest, opts ...grpc.CallOption) (*DeleteIdCartInfoResponse, error)
	GetUserCartItems(ctx context.Context, in *GetUserCartItemsRequest, opts ...grpc.CallOption) (*GetUserCartItemsResponse, error)
}

type cartRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCartRpcClient(cc grpc.ClientConnInterface) CartRpcClient {
	return &cartRpcClient{cc}
}

func (c *cartRpcClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) GetCartItem(ctx context.Context, in *GetCartItemRequest, opts ...grpc.CallOption) (*GetCartItemResponse, error) {
	out := new(GetCartItemResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/GetCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartResponse, error) {
	out := new(GetCartResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) ClearCartInfo(ctx context.Context, in *ClearCartInfoRequest, opts ...grpc.CallOption) (*ClearCartInfoResponse, error) {
	out := new(ClearCartInfoResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/ClearCartInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) CheckItem(ctx context.Context, in *CheckItemRequest, opts ...grpc.CallOption) (*CheckItemResponse, error) {
	out := new(CheckItemResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/CheckItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) ChangeItemCount(ctx context.Context, in *ChangeItemCountRequest, opts ...grpc.CallOption) (*ChangeItemCountResponse, error) {
	out := new(ChangeItemCountResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/ChangeItemCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) DeleteIdCartInfo(ctx context.Context, in *DeleteIdCartInfoRequest, opts ...grpc.CallOption) (*DeleteIdCartInfoResponse, error) {
	out := new(DeleteIdCartInfoResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/DeleteIdCartInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartRpcClient) GetUserCartItems(ctx context.Context, in *GetUserCartItemsRequest, opts ...grpc.CallOption) (*GetUserCartItemsResponse, error) {
	out := new(GetUserCartItemsResponse)
	err := c.cc.Invoke(ctx, "/proto_cart.CartRpc/GetUserCartItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartRpcServer is the server API for CartRpc service.
// All implementations must embed UnimplementedCartRpcServer
// for forward compatibility
type CartRpcServer interface {
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	GetCartItem(context.Context, *GetCartItemRequest) (*GetCartItemResponse, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error)
	ClearCartInfo(context.Context, *ClearCartInfoRequest) (*ClearCartInfoResponse, error)
	CheckItem(context.Context, *CheckItemRequest) (*CheckItemResponse, error)
	ChangeItemCount(context.Context, *ChangeItemCountRequest) (*ChangeItemCountResponse, error)
	DeleteIdCartInfo(context.Context, *DeleteIdCartInfoRequest) (*DeleteIdCartInfoResponse, error)
	GetUserCartItems(context.Context, *GetUserCartItemsRequest) (*GetUserCartItemsResponse, error)
	mustEmbedUnimplementedCartRpcServer()
}

// UnimplementedCartRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCartRpcServer struct {
}

func (UnimplementedCartRpcServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartRpcServer) GetCartItem(context.Context, *GetCartItemRequest) (*GetCartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItem not implemented")
}
func (UnimplementedCartRpcServer) GetCart(context.Context, *GetCartRequest) (*GetCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartRpcServer) ClearCartInfo(context.Context, *ClearCartInfoRequest) (*ClearCartInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCartInfo not implemented")
}
func (UnimplementedCartRpcServer) CheckItem(context.Context, *CheckItemRequest) (*CheckItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckItem not implemented")
}
func (UnimplementedCartRpcServer) ChangeItemCount(context.Context, *ChangeItemCountRequest) (*ChangeItemCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeItemCount not implemented")
}
func (UnimplementedCartRpcServer) DeleteIdCartInfo(context.Context, *DeleteIdCartInfoRequest) (*DeleteIdCartInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdCartInfo not implemented")
}
func (UnimplementedCartRpcServer) GetUserCartItems(context.Context, *GetUserCartItemsRequest) (*GetUserCartItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCartItems not implemented")
}
func (UnimplementedCartRpcServer) mustEmbedUnimplementedCartRpcServer() {}

// UnsafeCartRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartRpcServer will
// result in compilation errors.
type UnsafeCartRpcServer interface {
	mustEmbedUnimplementedCartRpcServer()
}

func RegisterCartRpcServer(s grpc.ServiceRegistrar, srv CartRpcServer) {
	s.RegisterService(&CartRpc_ServiceDesc, srv)
}

func _CartRpc_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_GetCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).GetCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/GetCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).GetCartItem(ctx, req.(*GetCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_ClearCartInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCartInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).ClearCartInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/ClearCartInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).ClearCartInfo(ctx, req.(*ClearCartInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_CheckItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).CheckItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/CheckItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).CheckItem(ctx, req.(*CheckItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_ChangeItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeItemCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).ChangeItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/ChangeItemCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).ChangeItemCount(ctx, req.(*ChangeItemCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_DeleteIdCartInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdCartInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).DeleteIdCartInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/DeleteIdCartInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).DeleteIdCartInfo(ctx, req.(*DeleteIdCartInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartRpc_GetUserCartItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCartItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartRpcServer).GetUserCartItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_cart.CartRpc/GetUserCartItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartRpcServer).GetUserCartItems(ctx, req.(*GetUserCartItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartRpc_ServiceDesc is the grpc.ServiceDesc for CartRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_cart.CartRpc",
	HandlerType: (*CartRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _CartRpc_AddToCart_Handler,
		},
		{
			MethodName: "GetCartItem",
			Handler:    _CartRpc_GetCartItem_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartRpc_GetCart_Handler,
		},
		{
			MethodName: "ClearCartInfo",
			Handler:    _CartRpc_ClearCartInfo_Handler,
		},
		{
			MethodName: "CheckItem",
			Handler:    _CartRpc_CheckItem_Handler,
		},
		{
			MethodName: "ChangeItemCount",
			Handler:    _CartRpc_ChangeItemCount_Handler,
		},
		{
			MethodName: "DeleteIdCartInfo",
			Handler:    _CartRpc_DeleteIdCartInfo_Handler,
		},
		{
			MethodName: "GetUserCartItems",
			Handler:    _CartRpc_GetUserCartItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall-demo/micro-mall-api/proto/micro-mall-cart-proto/cart.proto",
}
