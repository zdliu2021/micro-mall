// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: mall-demo/micro-mall-api/proto/micro-mall-product-proto/product.proto

package proto_product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductRpcClient is the client API for ProductRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductRpcClient interface {
	// category
	ListCategoryTree(ctx context.Context, in *ListCategoryTreeRequest, opts ...grpc.CallOption) (*ListCategoryTreeResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...grpc.CallOption) (*SaveCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	GetCategoryInfo(ctx context.Context, in *GetCategoryInfoRequest, opts ...grpc.CallOption) (*GetCategoryInfoResponse, error)
	// brand
	GetBrandList(ctx context.Context, in *GetBrandListRequest, opts ...grpc.CallOption) (*GetBrandListResponse, error)
	GetBrandInfo(ctx context.Context, in *GetBrandInfoRequest, opts ...grpc.CallOption) (*GetBrandInfoResponse, error)
	SaveBrand(ctx context.Context, in *SaveBrandRequest, opts ...grpc.CallOption) (*SaveBrandResponse, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*DeleteBrandResponse, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error)
	UpdateBrandStatus(ctx context.Context, in *UpdateBrandStatusRequest, opts ...grpc.CallOption) (*UpdateBrandStatusResponse, error)
	GetBrandRelatedCateLog(ctx context.Context, in *GetBrandRelatedCateLogRequest, opts ...grpc.CallOption) (*GetBrandRelatedCateLogResponse, error)
	SaveBrandCatelogRelation(ctx context.Context, in *SaveBrandCatelogRelationRequest, opts ...grpc.CallOption) (*SaveBrandCatelogRelationResponse, error)
	DeleteBrandCatelogRelation(ctx context.Context, in *DeleteBrandCatelogRelationRequest, opts ...grpc.CallOption) (*DeleteBrandCatelogRelationResponse, error)
	GetBrandRelatedWithCatelog(ctx context.Context, in *GetBrandRelatedWithCatelogRequest, opts ...grpc.CallOption) (*GetBrandRelatedWithCatelogResponse, error)
	// AttrGroup
	ListCatelogAttrGroup(ctx context.Context, in *ListCatelogAttrGroupRequest, opts ...grpc.CallOption) (*ListCatelogAttrGroupResponse, error)
	GetAttrGroupInfo(ctx context.Context, in *GetAttrGroupInfoRequest, opts ...grpc.CallOption) (*GetAttrGroupInfoResponse, error)
	UpdateAttrGroup(ctx context.Context, in *UpdateAttrGroupRequest, opts ...grpc.CallOption) (*UpdateAttrGroupResponse, error)
	SaveAttrGroup(ctx context.Context, in *SaveAttrGroupRequest, opts ...grpc.CallOption) (*SaveAttrGroupResponse, error)
	DeleteAttrGroup(ctx context.Context, in *DeleteAttrGroupRequest, opts ...grpc.CallOption) (*DeleteAttrGroupResponse, error)
	GetAllGroupAndAttrRelatedWithCatelog(ctx context.Context, in *GetAllGroupAndAttrRelatedWithCatelogRequest, opts ...grpc.CallOption) (*GetAllGroupAndAttrRelatedWithCatelogResponse, error)
	// attr
	GetAttrListRelatedWithCatelog(ctx context.Context, in *GetAttrListRelatedWithCatelogRequest, opts ...grpc.CallOption) (*GetAttrListRelatedWithCatelogResponse, error)
	SaveProductAttr(ctx context.Context, in *SaveProductAttrRequest, opts ...grpc.CallOption) (*SaveProductAttrResponse, error)
	GetAttrInfo(ctx context.Context, in *GetAttrInfoRequest, opts ...grpc.CallOption) (*GetAttrInfoResponse, error)
	GetAttrNotCorrelation(ctx context.Context, in *GetAttrNotCorrelationRequest, opts ...grpc.CallOption) (*GetAttrNotCorrelationResponse, error)
	DeleteAttrAttrGroupRelation(ctx context.Context, in *DeleteAttrAttrGroupRelationRequest, opts ...grpc.CallOption) (*DeleteAttrAttrGroupRelationResponse, error)
	SaveAttrAttrGroupRelation(ctx context.Context, in *SaveAttrAttrGroupRelationRequest, opts ...grpc.CallOption) (*SaveAttrAttrGroupRelationResponse, error)
	GetAttrRelatedAttrGroup(ctx context.Context, in *GetAttrRelatedAttrGroupRequest, opts ...grpc.CallOption) (*GetAttrRelatedAttrGroupResponse, error)
	UpdateAttr(ctx context.Context, in *UpdateAttrRequest, opts ...grpc.CallOption) (*UpdateAttrResponse, error)
	DeleteAttr(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*DeleteAttrResponse, error)
	// sku,spu
	SearchSpuInfo(ctx context.Context, in *SearchSpuInfoRequest, opts ...grpc.CallOption) (*SearchSpuInfoResponse, error)
	SaveSpu(ctx context.Context, in *SaveSpuRequest, opts ...grpc.CallOption) (*SaveSpuResponse, error)
	UpSpu(ctx context.Context, in *UpSpuRequest, opts ...grpc.CallOption) (*UpSpuResponse, error)
	SearchSkuInfo(ctx context.Context, in *SearchSkuInfoRequest, opts ...grpc.CallOption) (*SearchSkuInfoResponse, error)
	GetSpuInfo(ctx context.Context, in *GetSpuInfoRequest, opts ...grpc.CallOption) (*GetSpuInfoResponse, error)
	UpdateSpuAttrs(ctx context.Context, in *UpdateSpuAttrsRequest, opts ...grpc.CallOption) (*UpdateSpuAttrsResponse, error)
	GetSkuItem(ctx context.Context, in *GetSkuItemRequest, opts ...grpc.CallOption) (*GetSkuItemResponse, error)
}

type productRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductRpcClient(cc grpc.ClientConnInterface) ProductRpcClient {
	return &productRpcClient{cc}
}

func (c *productRpcClient) ListCategoryTree(ctx context.Context, in *ListCategoryTreeRequest, opts ...grpc.CallOption) (*ListCategoryTreeResponse, error) {
	out := new(ListCategoryTreeResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/ListCategoryTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...grpc.CallOption) (*SaveCategoryResponse, error) {
	out := new(SaveCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetCategoryInfo(ctx context.Context, in *GetCategoryInfoRequest, opts ...grpc.CallOption) (*GetCategoryInfoResponse, error) {
	out := new(GetCategoryInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetCategoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetBrandList(ctx context.Context, in *GetBrandListRequest, opts ...grpc.CallOption) (*GetBrandListResponse, error) {
	out := new(GetBrandListResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetBrandInfo(ctx context.Context, in *GetBrandInfoRequest, opts ...grpc.CallOption) (*GetBrandInfoResponse, error) {
	out := new(GetBrandInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetBrandInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveBrand(ctx context.Context, in *SaveBrandRequest, opts ...grpc.CallOption) (*SaveBrandResponse, error) {
	out := new(SaveBrandResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*DeleteBrandResponse, error) {
	out := new(DeleteBrandResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error) {
	out := new(UpdateBrandResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateBrandStatus(ctx context.Context, in *UpdateBrandStatusRequest, opts ...grpc.CallOption) (*UpdateBrandStatusResponse, error) {
	out := new(UpdateBrandStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpdateBrandStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetBrandRelatedCateLog(ctx context.Context, in *GetBrandRelatedCateLogRequest, opts ...grpc.CallOption) (*GetBrandRelatedCateLogResponse, error) {
	out := new(GetBrandRelatedCateLogResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetBrandRelatedCateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveBrandCatelogRelation(ctx context.Context, in *SaveBrandCatelogRelationRequest, opts ...grpc.CallOption) (*SaveBrandCatelogRelationResponse, error) {
	out := new(SaveBrandCatelogRelationResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveBrandCatelogRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteBrandCatelogRelation(ctx context.Context, in *DeleteBrandCatelogRelationRequest, opts ...grpc.CallOption) (*DeleteBrandCatelogRelationResponse, error) {
	out := new(DeleteBrandCatelogRelationResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/DeleteBrandCatelogRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetBrandRelatedWithCatelog(ctx context.Context, in *GetBrandRelatedWithCatelogRequest, opts ...grpc.CallOption) (*GetBrandRelatedWithCatelogResponse, error) {
	out := new(GetBrandRelatedWithCatelogResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetBrandRelatedWithCatelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) ListCatelogAttrGroup(ctx context.Context, in *ListCatelogAttrGroupRequest, opts ...grpc.CallOption) (*ListCatelogAttrGroupResponse, error) {
	out := new(ListCatelogAttrGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/ListCatelogAttrGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetAttrGroupInfo(ctx context.Context, in *GetAttrGroupInfoRequest, opts ...grpc.CallOption) (*GetAttrGroupInfoResponse, error) {
	out := new(GetAttrGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetAttrGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateAttrGroup(ctx context.Context, in *UpdateAttrGroupRequest, opts ...grpc.CallOption) (*UpdateAttrGroupResponse, error) {
	out := new(UpdateAttrGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpdateAttrGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveAttrGroup(ctx context.Context, in *SaveAttrGroupRequest, opts ...grpc.CallOption) (*SaveAttrGroupResponse, error) {
	out := new(SaveAttrGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveAttrGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteAttrGroup(ctx context.Context, in *DeleteAttrGroupRequest, opts ...grpc.CallOption) (*DeleteAttrGroupResponse, error) {
	out := new(DeleteAttrGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/DeleteAttrGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetAllGroupAndAttrRelatedWithCatelog(ctx context.Context, in *GetAllGroupAndAttrRelatedWithCatelogRequest, opts ...grpc.CallOption) (*GetAllGroupAndAttrRelatedWithCatelogResponse, error) {
	out := new(GetAllGroupAndAttrRelatedWithCatelogResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetAllGroupAndAttrRelatedWithCatelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetAttrListRelatedWithCatelog(ctx context.Context, in *GetAttrListRelatedWithCatelogRequest, opts ...grpc.CallOption) (*GetAttrListRelatedWithCatelogResponse, error) {
	out := new(GetAttrListRelatedWithCatelogResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetAttrListRelatedWithCatelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveProductAttr(ctx context.Context, in *SaveProductAttrRequest, opts ...grpc.CallOption) (*SaveProductAttrResponse, error) {
	out := new(SaveProductAttrResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveProductAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetAttrInfo(ctx context.Context, in *GetAttrInfoRequest, opts ...grpc.CallOption) (*GetAttrInfoResponse, error) {
	out := new(GetAttrInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetAttrInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetAttrNotCorrelation(ctx context.Context, in *GetAttrNotCorrelationRequest, opts ...grpc.CallOption) (*GetAttrNotCorrelationResponse, error) {
	out := new(GetAttrNotCorrelationResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetAttrNotCorrelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteAttrAttrGroupRelation(ctx context.Context, in *DeleteAttrAttrGroupRelationRequest, opts ...grpc.CallOption) (*DeleteAttrAttrGroupRelationResponse, error) {
	out := new(DeleteAttrAttrGroupRelationResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/DeleteAttrAttrGroupRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveAttrAttrGroupRelation(ctx context.Context, in *SaveAttrAttrGroupRelationRequest, opts ...grpc.CallOption) (*SaveAttrAttrGroupRelationResponse, error) {
	out := new(SaveAttrAttrGroupRelationResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveAttrAttrGroupRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetAttrRelatedAttrGroup(ctx context.Context, in *GetAttrRelatedAttrGroupRequest, opts ...grpc.CallOption) (*GetAttrRelatedAttrGroupResponse, error) {
	out := new(GetAttrRelatedAttrGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetAttrRelatedAttrGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateAttr(ctx context.Context, in *UpdateAttrRequest, opts ...grpc.CallOption) (*UpdateAttrResponse, error) {
	out := new(UpdateAttrResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpdateAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) DeleteAttr(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*DeleteAttrResponse, error) {
	out := new(DeleteAttrResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/DeleteAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SearchSpuInfo(ctx context.Context, in *SearchSpuInfoRequest, opts ...grpc.CallOption) (*SearchSpuInfoResponse, error) {
	out := new(SearchSpuInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SearchSpuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SaveSpu(ctx context.Context, in *SaveSpuRequest, opts ...grpc.CallOption) (*SaveSpuResponse, error) {
	out := new(SaveSpuResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SaveSpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpSpu(ctx context.Context, in *UpSpuRequest, opts ...grpc.CallOption) (*UpSpuResponse, error) {
	out := new(UpSpuResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpSpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) SearchSkuInfo(ctx context.Context, in *SearchSkuInfoRequest, opts ...grpc.CallOption) (*SearchSkuInfoResponse, error) {
	out := new(SearchSkuInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/SearchSkuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetSpuInfo(ctx context.Context, in *GetSpuInfoRequest, opts ...grpc.CallOption) (*GetSpuInfoResponse, error) {
	out := new(GetSpuInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetSpuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateSpuAttrs(ctx context.Context, in *UpdateSpuAttrsRequest, opts ...grpc.CallOption) (*UpdateSpuAttrsResponse, error) {
	out := new(UpdateSpuAttrsResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/UpdateSpuAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetSkuItem(ctx context.Context, in *GetSkuItemRequest, opts ...grpc.CallOption) (*GetSkuItemResponse, error) {
	out := new(GetSkuItemResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductRpc/GetSkuItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductRpcServer is the server API for ProductRpc service.
// All implementations must embed UnimplementedProductRpcServer
// for forward compatibility
type ProductRpcServer interface {
	// category
	ListCategoryTree(context.Context, *ListCategoryTreeRequest) (*ListCategoryTreeResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	GetCategoryInfo(context.Context, *GetCategoryInfoRequest) (*GetCategoryInfoResponse, error)
	// brand
	GetBrandList(context.Context, *GetBrandListRequest) (*GetBrandListResponse, error)
	GetBrandInfo(context.Context, *GetBrandInfoRequest) (*GetBrandInfoResponse, error)
	SaveBrand(context.Context, *SaveBrandRequest) (*SaveBrandResponse, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandResponse, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error)
	UpdateBrandStatus(context.Context, *UpdateBrandStatusRequest) (*UpdateBrandStatusResponse, error)
	GetBrandRelatedCateLog(context.Context, *GetBrandRelatedCateLogRequest) (*GetBrandRelatedCateLogResponse, error)
	SaveBrandCatelogRelation(context.Context, *SaveBrandCatelogRelationRequest) (*SaveBrandCatelogRelationResponse, error)
	DeleteBrandCatelogRelation(context.Context, *DeleteBrandCatelogRelationRequest) (*DeleteBrandCatelogRelationResponse, error)
	GetBrandRelatedWithCatelog(context.Context, *GetBrandRelatedWithCatelogRequest) (*GetBrandRelatedWithCatelogResponse, error)
	// AttrGroup
	ListCatelogAttrGroup(context.Context, *ListCatelogAttrGroupRequest) (*ListCatelogAttrGroupResponse, error)
	GetAttrGroupInfo(context.Context, *GetAttrGroupInfoRequest) (*GetAttrGroupInfoResponse, error)
	UpdateAttrGroup(context.Context, *UpdateAttrGroupRequest) (*UpdateAttrGroupResponse, error)
	SaveAttrGroup(context.Context, *SaveAttrGroupRequest) (*SaveAttrGroupResponse, error)
	DeleteAttrGroup(context.Context, *DeleteAttrGroupRequest) (*DeleteAttrGroupResponse, error)
	GetAllGroupAndAttrRelatedWithCatelog(context.Context, *GetAllGroupAndAttrRelatedWithCatelogRequest) (*GetAllGroupAndAttrRelatedWithCatelogResponse, error)
	// attr
	GetAttrListRelatedWithCatelog(context.Context, *GetAttrListRelatedWithCatelogRequest) (*GetAttrListRelatedWithCatelogResponse, error)
	SaveProductAttr(context.Context, *SaveProductAttrRequest) (*SaveProductAttrResponse, error)
	GetAttrInfo(context.Context, *GetAttrInfoRequest) (*GetAttrInfoResponse, error)
	GetAttrNotCorrelation(context.Context, *GetAttrNotCorrelationRequest) (*GetAttrNotCorrelationResponse, error)
	DeleteAttrAttrGroupRelation(context.Context, *DeleteAttrAttrGroupRelationRequest) (*DeleteAttrAttrGroupRelationResponse, error)
	SaveAttrAttrGroupRelation(context.Context, *SaveAttrAttrGroupRelationRequest) (*SaveAttrAttrGroupRelationResponse, error)
	GetAttrRelatedAttrGroup(context.Context, *GetAttrRelatedAttrGroupRequest) (*GetAttrRelatedAttrGroupResponse, error)
	UpdateAttr(context.Context, *UpdateAttrRequest) (*UpdateAttrResponse, error)
	DeleteAttr(context.Context, *DeleteAttrRequest) (*DeleteAttrResponse, error)
	// sku,spu
	SearchSpuInfo(context.Context, *SearchSpuInfoRequest) (*SearchSpuInfoResponse, error)
	SaveSpu(context.Context, *SaveSpuRequest) (*SaveSpuResponse, error)
	UpSpu(context.Context, *UpSpuRequest) (*UpSpuResponse, error)
	SearchSkuInfo(context.Context, *SearchSkuInfoRequest) (*SearchSkuInfoResponse, error)
	GetSpuInfo(context.Context, *GetSpuInfoRequest) (*GetSpuInfoResponse, error)
	UpdateSpuAttrs(context.Context, *UpdateSpuAttrsRequest) (*UpdateSpuAttrsResponse, error)
	GetSkuItem(context.Context, *GetSkuItemRequest) (*GetSkuItemResponse, error)
	mustEmbedUnimplementedProductRpcServer()
}

// UnimplementedProductRpcServer must be embedded to have forward compatible implementations.
type UnimplementedProductRpcServer struct {
}

func (UnimplementedProductRpcServer) ListCategoryTree(context.Context, *ListCategoryTreeRequest) (*ListCategoryTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryTree not implemented")
}
func (UnimplementedProductRpcServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductRpcServer) SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCategory not implemented")
}
func (UnimplementedProductRpcServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductRpcServer) GetCategoryInfo(context.Context, *GetCategoryInfoRequest) (*GetCategoryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryInfo not implemented")
}
func (UnimplementedProductRpcServer) GetBrandList(context.Context, *GetBrandListRequest) (*GetBrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (UnimplementedProductRpcServer) GetBrandInfo(context.Context, *GetBrandInfoRequest) (*GetBrandInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandInfo not implemented")
}
func (UnimplementedProductRpcServer) SaveBrand(context.Context, *SaveBrandRequest) (*SaveBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBrand not implemented")
}
func (UnimplementedProductRpcServer) DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductRpcServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductRpcServer) UpdateBrandStatus(context.Context, *UpdateBrandStatusRequest) (*UpdateBrandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandStatus not implemented")
}
func (UnimplementedProductRpcServer) GetBrandRelatedCateLog(context.Context, *GetBrandRelatedCateLogRequest) (*GetBrandRelatedCateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandRelatedCateLog not implemented")
}
func (UnimplementedProductRpcServer) SaveBrandCatelogRelation(context.Context, *SaveBrandCatelogRelationRequest) (*SaveBrandCatelogRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBrandCatelogRelation not implemented")
}
func (UnimplementedProductRpcServer) DeleteBrandCatelogRelation(context.Context, *DeleteBrandCatelogRelationRequest) (*DeleteBrandCatelogRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrandCatelogRelation not implemented")
}
func (UnimplementedProductRpcServer) GetBrandRelatedWithCatelog(context.Context, *GetBrandRelatedWithCatelogRequest) (*GetBrandRelatedWithCatelogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandRelatedWithCatelog not implemented")
}
func (UnimplementedProductRpcServer) ListCatelogAttrGroup(context.Context, *ListCatelogAttrGroupRequest) (*ListCatelogAttrGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatelogAttrGroup not implemented")
}
func (UnimplementedProductRpcServer) GetAttrGroupInfo(context.Context, *GetAttrGroupInfoRequest) (*GetAttrGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttrGroupInfo not implemented")
}
func (UnimplementedProductRpcServer) UpdateAttrGroup(context.Context, *UpdateAttrGroupRequest) (*UpdateAttrGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttrGroup not implemented")
}
func (UnimplementedProductRpcServer) SaveAttrGroup(context.Context, *SaveAttrGroupRequest) (*SaveAttrGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAttrGroup not implemented")
}
func (UnimplementedProductRpcServer) DeleteAttrGroup(context.Context, *DeleteAttrGroupRequest) (*DeleteAttrGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttrGroup not implemented")
}
func (UnimplementedProductRpcServer) GetAllGroupAndAttrRelatedWithCatelog(context.Context, *GetAllGroupAndAttrRelatedWithCatelogRequest) (*GetAllGroupAndAttrRelatedWithCatelogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroupAndAttrRelatedWithCatelog not implemented")
}
func (UnimplementedProductRpcServer) GetAttrListRelatedWithCatelog(context.Context, *GetAttrListRelatedWithCatelogRequest) (*GetAttrListRelatedWithCatelogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttrListRelatedWithCatelog not implemented")
}
func (UnimplementedProductRpcServer) SaveProductAttr(context.Context, *SaveProductAttrRequest) (*SaveProductAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProductAttr not implemented")
}
func (UnimplementedProductRpcServer) GetAttrInfo(context.Context, *GetAttrInfoRequest) (*GetAttrInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttrInfo not implemented")
}
func (UnimplementedProductRpcServer) GetAttrNotCorrelation(context.Context, *GetAttrNotCorrelationRequest) (*GetAttrNotCorrelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttrNotCorrelation not implemented")
}
func (UnimplementedProductRpcServer) DeleteAttrAttrGroupRelation(context.Context, *DeleteAttrAttrGroupRelationRequest) (*DeleteAttrAttrGroupRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttrAttrGroupRelation not implemented")
}
func (UnimplementedProductRpcServer) SaveAttrAttrGroupRelation(context.Context, *SaveAttrAttrGroupRelationRequest) (*SaveAttrAttrGroupRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAttrAttrGroupRelation not implemented")
}
func (UnimplementedProductRpcServer) GetAttrRelatedAttrGroup(context.Context, *GetAttrRelatedAttrGroupRequest) (*GetAttrRelatedAttrGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttrRelatedAttrGroup not implemented")
}
func (UnimplementedProductRpcServer) UpdateAttr(context.Context, *UpdateAttrRequest) (*UpdateAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttr not implemented")
}
func (UnimplementedProductRpcServer) DeleteAttr(context.Context, *DeleteAttrRequest) (*DeleteAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttr not implemented")
}
func (UnimplementedProductRpcServer) SearchSpuInfo(context.Context, *SearchSpuInfoRequest) (*SearchSpuInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSpuInfo not implemented")
}
func (UnimplementedProductRpcServer) SaveSpu(context.Context, *SaveSpuRequest) (*SaveSpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSpu not implemented")
}
func (UnimplementedProductRpcServer) UpSpu(context.Context, *UpSpuRequest) (*UpSpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpSpu not implemented")
}
func (UnimplementedProductRpcServer) SearchSkuInfo(context.Context, *SearchSkuInfoRequest) (*SearchSkuInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSkuInfo not implemented")
}
func (UnimplementedProductRpcServer) GetSpuInfo(context.Context, *GetSpuInfoRequest) (*GetSpuInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpuInfo not implemented")
}
func (UnimplementedProductRpcServer) UpdateSpuAttrs(context.Context, *UpdateSpuAttrsRequest) (*UpdateSpuAttrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpuAttrs not implemented")
}
func (UnimplementedProductRpcServer) GetSkuItem(context.Context, *GetSkuItemRequest) (*GetSkuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuItem not implemented")
}
func (UnimplementedProductRpcServer) mustEmbedUnimplementedProductRpcServer() {}

// UnsafeProductRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductRpcServer will
// result in compilation errors.
type UnsafeProductRpcServer interface {
	mustEmbedUnimplementedProductRpcServer()
}

func RegisterProductRpcServer(s grpc.ServiceRegistrar, srv ProductRpcServer) {
	s.RegisterService(&ProductRpc_ServiceDesc, srv)
}

func _ProductRpc_ListCategoryTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).ListCategoryTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/ListCategoryTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).ListCategoryTree(ctx, req.(*ListCategoryTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveCategory(ctx, req.(*SaveCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetCategoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetCategoryInfo(ctx, req.(*GetCategoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetBrandList(ctx, req.(*GetBrandListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetBrandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetBrandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetBrandInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetBrandInfo(ctx, req.(*GetBrandInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveBrand(ctx, req.(*SaveBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteBrand(ctx, req.(*DeleteBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateBrandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateBrandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpdateBrandStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateBrandStatus(ctx, req.(*UpdateBrandStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetBrandRelatedCateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRelatedCateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetBrandRelatedCateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetBrandRelatedCateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetBrandRelatedCateLog(ctx, req.(*GetBrandRelatedCateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveBrandCatelogRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBrandCatelogRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveBrandCatelogRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveBrandCatelogRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveBrandCatelogRelation(ctx, req.(*SaveBrandCatelogRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteBrandCatelogRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandCatelogRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteBrandCatelogRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/DeleteBrandCatelogRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteBrandCatelogRelation(ctx, req.(*DeleteBrandCatelogRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetBrandRelatedWithCatelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRelatedWithCatelogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetBrandRelatedWithCatelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetBrandRelatedWithCatelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetBrandRelatedWithCatelog(ctx, req.(*GetBrandRelatedWithCatelogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_ListCatelogAttrGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatelogAttrGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).ListCatelogAttrGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/ListCatelogAttrGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).ListCatelogAttrGroup(ctx, req.(*ListCatelogAttrGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetAttrGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetAttrGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetAttrGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetAttrGroupInfo(ctx, req.(*GetAttrGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateAttrGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttrGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateAttrGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpdateAttrGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateAttrGroup(ctx, req.(*UpdateAttrGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveAttrGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAttrGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveAttrGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveAttrGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveAttrGroup(ctx, req.(*SaveAttrGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteAttrGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteAttrGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/DeleteAttrGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteAttrGroup(ctx, req.(*DeleteAttrGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetAllGroupAndAttrRelatedWithCatelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGroupAndAttrRelatedWithCatelogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetAllGroupAndAttrRelatedWithCatelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetAllGroupAndAttrRelatedWithCatelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetAllGroupAndAttrRelatedWithCatelog(ctx, req.(*GetAllGroupAndAttrRelatedWithCatelogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetAttrListRelatedWithCatelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrListRelatedWithCatelogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetAttrListRelatedWithCatelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetAttrListRelatedWithCatelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetAttrListRelatedWithCatelog(ctx, req.(*GetAttrListRelatedWithCatelogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveProductAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProductAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveProductAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveProductAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveProductAttr(ctx, req.(*SaveProductAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetAttrInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetAttrInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetAttrInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetAttrInfo(ctx, req.(*GetAttrInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetAttrNotCorrelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrNotCorrelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetAttrNotCorrelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetAttrNotCorrelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetAttrNotCorrelation(ctx, req.(*GetAttrNotCorrelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteAttrAttrGroupRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrAttrGroupRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteAttrAttrGroupRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/DeleteAttrAttrGroupRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteAttrAttrGroupRelation(ctx, req.(*DeleteAttrAttrGroupRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveAttrAttrGroupRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAttrAttrGroupRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveAttrAttrGroupRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveAttrAttrGroupRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveAttrAttrGroupRelation(ctx, req.(*SaveAttrAttrGroupRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetAttrRelatedAttrGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrRelatedAttrGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetAttrRelatedAttrGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetAttrRelatedAttrGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetAttrRelatedAttrGroup(ctx, req.(*GetAttrRelatedAttrGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpdateAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateAttr(ctx, req.(*UpdateAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_DeleteAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).DeleteAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/DeleteAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).DeleteAttr(ctx, req.(*DeleteAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SearchSpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSpuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SearchSpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SearchSpuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SearchSpuInfo(ctx, req.(*SearchSpuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SaveSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SaveSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SaveSpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SaveSpu(ctx, req.(*SaveSpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpSpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpSpu(ctx, req.(*UpSpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_SearchSkuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSkuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).SearchSkuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/SearchSkuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).SearchSkuInfo(ctx, req.(*SearchSkuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetSpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetSpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetSpuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetSpuInfo(ctx, req.(*GetSpuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateSpuAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpuAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateSpuAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/UpdateSpuAttrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateSpuAttrs(ctx, req.(*UpdateSpuAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetSkuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetSkuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductRpc/GetSkuItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetSkuItem(ctx, req.(*GetSkuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductRpc_ServiceDesc is the grpc.ServiceDesc for ProductRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProductRpc",
	HandlerType: (*ProductRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCategoryTree",
			Handler:    _ProductRpc_ListCategoryTree_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductRpc_DeleteCategory_Handler,
		},
		{
			MethodName: "SaveCategory",
			Handler:    _ProductRpc_SaveCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductRpc_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategoryInfo",
			Handler:    _ProductRpc_GetCategoryInfo_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _ProductRpc_GetBrandList_Handler,
		},
		{
			MethodName: "GetBrandInfo",
			Handler:    _ProductRpc_GetBrandInfo_Handler,
		},
		{
			MethodName: "SaveBrand",
			Handler:    _ProductRpc_SaveBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _ProductRpc_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _ProductRpc_UpdateBrand_Handler,
		},
		{
			MethodName: "UpdateBrandStatus",
			Handler:    _ProductRpc_UpdateBrandStatus_Handler,
		},
		{
			MethodName: "GetBrandRelatedCateLog",
			Handler:    _ProductRpc_GetBrandRelatedCateLog_Handler,
		},
		{
			MethodName: "SaveBrandCatelogRelation",
			Handler:    _ProductRpc_SaveBrandCatelogRelation_Handler,
		},
		{
			MethodName: "DeleteBrandCatelogRelation",
			Handler:    _ProductRpc_DeleteBrandCatelogRelation_Handler,
		},
		{
			MethodName: "GetBrandRelatedWithCatelog",
			Handler:    _ProductRpc_GetBrandRelatedWithCatelog_Handler,
		},
		{
			MethodName: "ListCatelogAttrGroup",
			Handler:    _ProductRpc_ListCatelogAttrGroup_Handler,
		},
		{
			MethodName: "GetAttrGroupInfo",
			Handler:    _ProductRpc_GetAttrGroupInfo_Handler,
		},
		{
			MethodName: "UpdateAttrGroup",
			Handler:    _ProductRpc_UpdateAttrGroup_Handler,
		},
		{
			MethodName: "SaveAttrGroup",
			Handler:    _ProductRpc_SaveAttrGroup_Handler,
		},
		{
			MethodName: "DeleteAttrGroup",
			Handler:    _ProductRpc_DeleteAttrGroup_Handler,
		},
		{
			MethodName: "GetAllGroupAndAttrRelatedWithCatelog",
			Handler:    _ProductRpc_GetAllGroupAndAttrRelatedWithCatelog_Handler,
		},
		{
			MethodName: "GetAttrListRelatedWithCatelog",
			Handler:    _ProductRpc_GetAttrListRelatedWithCatelog_Handler,
		},
		{
			MethodName: "SaveProductAttr",
			Handler:    _ProductRpc_SaveProductAttr_Handler,
		},
		{
			MethodName: "GetAttrInfo",
			Handler:    _ProductRpc_GetAttrInfo_Handler,
		},
		{
			MethodName: "GetAttrNotCorrelation",
			Handler:    _ProductRpc_GetAttrNotCorrelation_Handler,
		},
		{
			MethodName: "DeleteAttrAttrGroupRelation",
			Handler:    _ProductRpc_DeleteAttrAttrGroupRelation_Handler,
		},
		{
			MethodName: "SaveAttrAttrGroupRelation",
			Handler:    _ProductRpc_SaveAttrAttrGroupRelation_Handler,
		},
		{
			MethodName: "GetAttrRelatedAttrGroup",
			Handler:    _ProductRpc_GetAttrRelatedAttrGroup_Handler,
		},
		{
			MethodName: "UpdateAttr",
			Handler:    _ProductRpc_UpdateAttr_Handler,
		},
		{
			MethodName: "DeleteAttr",
			Handler:    _ProductRpc_DeleteAttr_Handler,
		},
		{
			MethodName: "SearchSpuInfo",
			Handler:    _ProductRpc_SearchSpuInfo_Handler,
		},
		{
			MethodName: "SaveSpu",
			Handler:    _ProductRpc_SaveSpu_Handler,
		},
		{
			MethodName: "UpSpu",
			Handler:    _ProductRpc_UpSpu_Handler,
		},
		{
			MethodName: "SearchSkuInfo",
			Handler:    _ProductRpc_SearchSkuInfo_Handler,
		},
		{
			MethodName: "GetSpuInfo",
			Handler:    _ProductRpc_GetSpuInfo_Handler,
		},
		{
			MethodName: "UpdateSpuAttrs",
			Handler:    _ProductRpc_UpdateSpuAttrs_Handler,
		},
		{
			MethodName: "GetSkuItem",
			Handler:    _ProductRpc_GetSkuItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall-demo/micro-mall-api/proto/micro-mall-product-proto/product.proto",
}
