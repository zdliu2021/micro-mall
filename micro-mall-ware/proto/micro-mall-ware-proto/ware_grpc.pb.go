// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: mall-demo/micro-mall-ware/proto/micro-mall-ware-proto/ware.proto

package proto_ware

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WareRpcClient is the client API for WareRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WareRpcClient interface {
	// wareinfo
	GetWareInfoList(ctx context.Context, in *GetWareInfoListRequest, opts ...grpc.CallOption) (*GetWareInfoListResponse, error)
	SaveWare(ctx context.Context, in *SaveWareRequest, opts ...grpc.CallOption) (*SaveWareResponse, error)
	GetSkuWareInfo(ctx context.Context, in *GetSkuWareInfoRequest, opts ...grpc.CallOption) (*GetSkuWareInfoResponse, error)
	GetSkuHasStock(ctx context.Context, in *GetSkuHasStockRequest, opts ...grpc.CallOption) (*GetSkuHasStockResponse, error)
	// purchaseDetail
	GetPurchaseDetailInfo(ctx context.Context, in *GetPurchaseDetailInfoRequest, opts ...grpc.CallOption) (*GetPurchaseDetailInfoResponse, error)
	SavePurchaseDetail(ctx context.Context, in *SavePurchaseDetailRequest, opts ...grpc.CallOption) (*SavePurchaseDetailResponse, error)
	// purchase
	GetPurchaseList(ctx context.Context, in *GetPurchaseListRequest, opts ...grpc.CallOption) (*GetPurchaseListResponse, error)
	SavePurcase(ctx context.Context, in *SavePurchaseRequest, opts ...grpc.CallOption) (*SavePurchaseResponse, error)
	MergePurchase(ctx context.Context, in *MergePurchaseRequest, opts ...grpc.CallOption) (*MergePurchaseResponse, error)
	GetUnReceivedPurchaseInfo(ctx context.Context, in *GetUnReceivedPurchaseInfoRequest, opts ...grpc.CallOption) (*GetUnReceivedPurchaseInfoResponse, error)
	ReceivePurchase(ctx context.Context, in *ReceivePurchaseRequest, opts ...grpc.CallOption) (*ReceivePurchaseResponse, error)
	UpdatePurchase(ctx context.Context, in *UpdatePurchaseRequest, opts ...grpc.CallOption) (*UpdatePurchaseResponse, error)
}

type wareRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewWareRpcClient(cc grpc.ClientConnInterface) WareRpcClient {
	return &wareRpcClient{cc}
}

func (c *wareRpcClient) GetWareInfoList(ctx context.Context, in *GetWareInfoListRequest, opts ...grpc.CallOption) (*GetWareInfoListResponse, error) {
	out := new(GetWareInfoListResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/GetWareInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) SaveWare(ctx context.Context, in *SaveWareRequest, opts ...grpc.CallOption) (*SaveWareResponse, error) {
	out := new(SaveWareResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/SaveWare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) GetSkuWareInfo(ctx context.Context, in *GetSkuWareInfoRequest, opts ...grpc.CallOption) (*GetSkuWareInfoResponse, error) {
	out := new(GetSkuWareInfoResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/GetSkuWareInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) GetSkuHasStock(ctx context.Context, in *GetSkuHasStockRequest, opts ...grpc.CallOption) (*GetSkuHasStockResponse, error) {
	out := new(GetSkuHasStockResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/GetSkuHasStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) GetPurchaseDetailInfo(ctx context.Context, in *GetPurchaseDetailInfoRequest, opts ...grpc.CallOption) (*GetPurchaseDetailInfoResponse, error) {
	out := new(GetPurchaseDetailInfoResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/GetPurchaseDetailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) SavePurchaseDetail(ctx context.Context, in *SavePurchaseDetailRequest, opts ...grpc.CallOption) (*SavePurchaseDetailResponse, error) {
	out := new(SavePurchaseDetailResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/SavePurchaseDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) GetPurchaseList(ctx context.Context, in *GetPurchaseListRequest, opts ...grpc.CallOption) (*GetPurchaseListResponse, error) {
	out := new(GetPurchaseListResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/GetPurchaseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) SavePurcase(ctx context.Context, in *SavePurchaseRequest, opts ...grpc.CallOption) (*SavePurchaseResponse, error) {
	out := new(SavePurchaseResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/SavePurcase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) MergePurchase(ctx context.Context, in *MergePurchaseRequest, opts ...grpc.CallOption) (*MergePurchaseResponse, error) {
	out := new(MergePurchaseResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/MergePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) GetUnReceivedPurchaseInfo(ctx context.Context, in *GetUnReceivedPurchaseInfoRequest, opts ...grpc.CallOption) (*GetUnReceivedPurchaseInfoResponse, error) {
	out := new(GetUnReceivedPurchaseInfoResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/GetUnReceivedPurchaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) ReceivePurchase(ctx context.Context, in *ReceivePurchaseRequest, opts ...grpc.CallOption) (*ReceivePurchaseResponse, error) {
	out := new(ReceivePurchaseResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/ReceivePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareRpcClient) UpdatePurchase(ctx context.Context, in *UpdatePurchaseRequest, opts ...grpc.CallOption) (*UpdatePurchaseResponse, error) {
	out := new(UpdatePurchaseResponse)
	err := c.cc.Invoke(ctx, "/ware.WareRpc/UpdatePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WareRpcServer is the server API for WareRpc service.
// All implementations must embed UnimplementedWareRpcServer
// for forward compatibility
type WareRpcServer interface {
	// wareinfo
	GetWareInfoList(context.Context, *GetWareInfoListRequest) (*GetWareInfoListResponse, error)
	SaveWare(context.Context, *SaveWareRequest) (*SaveWareResponse, error)
	GetSkuWareInfo(context.Context, *GetSkuWareInfoRequest) (*GetSkuWareInfoResponse, error)
	GetSkuHasStock(context.Context, *GetSkuHasStockRequest) (*GetSkuHasStockResponse, error)
	// purchaseDetail
	GetPurchaseDetailInfo(context.Context, *GetPurchaseDetailInfoRequest) (*GetPurchaseDetailInfoResponse, error)
	SavePurchaseDetail(context.Context, *SavePurchaseDetailRequest) (*SavePurchaseDetailResponse, error)
	// purchase
	GetPurchaseList(context.Context, *GetPurchaseListRequest) (*GetPurchaseListResponse, error)
	SavePurcase(context.Context, *SavePurchaseRequest) (*SavePurchaseResponse, error)
	MergePurchase(context.Context, *MergePurchaseRequest) (*MergePurchaseResponse, error)
	GetUnReceivedPurchaseInfo(context.Context, *GetUnReceivedPurchaseInfoRequest) (*GetUnReceivedPurchaseInfoResponse, error)
	ReceivePurchase(context.Context, *ReceivePurchaseRequest) (*ReceivePurchaseResponse, error)
	UpdatePurchase(context.Context, *UpdatePurchaseRequest) (*UpdatePurchaseResponse, error)
	mustEmbedUnimplementedWareRpcServer()
}

// UnimplementedWareRpcServer must be embedded to have forward compatible implementations.
type UnimplementedWareRpcServer struct {
}

func (UnimplementedWareRpcServer) GetWareInfoList(context.Context, *GetWareInfoListRequest) (*GetWareInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWareInfoList not implemented")
}
func (UnimplementedWareRpcServer) SaveWare(context.Context, *SaveWareRequest) (*SaveWareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWare not implemented")
}
func (UnimplementedWareRpcServer) GetSkuWareInfo(context.Context, *GetSkuWareInfoRequest) (*GetSkuWareInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuWareInfo not implemented")
}
func (UnimplementedWareRpcServer) GetSkuHasStock(context.Context, *GetSkuHasStockRequest) (*GetSkuHasStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuHasStock not implemented")
}
func (UnimplementedWareRpcServer) GetPurchaseDetailInfo(context.Context, *GetPurchaseDetailInfoRequest) (*GetPurchaseDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseDetailInfo not implemented")
}
func (UnimplementedWareRpcServer) SavePurchaseDetail(context.Context, *SavePurchaseDetailRequest) (*SavePurchaseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePurchaseDetail not implemented")
}
func (UnimplementedWareRpcServer) GetPurchaseList(context.Context, *GetPurchaseListRequest) (*GetPurchaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseList not implemented")
}
func (UnimplementedWareRpcServer) SavePurcase(context.Context, *SavePurchaseRequest) (*SavePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePurcase not implemented")
}
func (UnimplementedWareRpcServer) MergePurchase(context.Context, *MergePurchaseRequest) (*MergePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePurchase not implemented")
}
func (UnimplementedWareRpcServer) GetUnReceivedPurchaseInfo(context.Context, *GetUnReceivedPurchaseInfoRequest) (*GetUnReceivedPurchaseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnReceivedPurchaseInfo not implemented")
}
func (UnimplementedWareRpcServer) ReceivePurchase(context.Context, *ReceivePurchaseRequest) (*ReceivePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePurchase not implemented")
}
func (UnimplementedWareRpcServer) UpdatePurchase(context.Context, *UpdatePurchaseRequest) (*UpdatePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchase not implemented")
}
func (UnimplementedWareRpcServer) mustEmbedUnimplementedWareRpcServer() {}

// UnsafeWareRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WareRpcServer will
// result in compilation errors.
type UnsafeWareRpcServer interface {
	mustEmbedUnimplementedWareRpcServer()
}

func RegisterWareRpcServer(s grpc.ServiceRegistrar, srv WareRpcServer) {
	s.RegisterService(&WareRpc_ServiceDesc, srv)
}

func _WareRpc_GetWareInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWareInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).GetWareInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/GetWareInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).GetWareInfoList(ctx, req.(*GetWareInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_SaveWare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).SaveWare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/SaveWare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).SaveWare(ctx, req.(*SaveWareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_GetSkuWareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuWareInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).GetSkuWareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/GetSkuWareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).GetSkuWareInfo(ctx, req.(*GetSkuWareInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_GetSkuHasStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuHasStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).GetSkuHasStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/GetSkuHasStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).GetSkuHasStock(ctx, req.(*GetSkuHasStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_GetPurchaseDetailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseDetailInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).GetPurchaseDetailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/GetPurchaseDetailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).GetPurchaseDetailInfo(ctx, req.(*GetPurchaseDetailInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_SavePurchaseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePurchaseDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).SavePurchaseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/SavePurchaseDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).SavePurchaseDetail(ctx, req.(*SavePurchaseDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_GetPurchaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).GetPurchaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/GetPurchaseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).GetPurchaseList(ctx, req.(*GetPurchaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_SavePurcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).SavePurcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/SavePurcase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).SavePurcase(ctx, req.(*SavePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_MergePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).MergePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/MergePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).MergePurchase(ctx, req.(*MergePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_GetUnReceivedPurchaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnReceivedPurchaseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).GetUnReceivedPurchaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/GetUnReceivedPurchaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).GetUnReceivedPurchaseInfo(ctx, req.(*GetUnReceivedPurchaseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_ReceivePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).ReceivePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/ReceivePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).ReceivePurchase(ctx, req.(*ReceivePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareRpc_UpdatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareRpcServer).UpdatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ware.WareRpc/UpdatePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareRpcServer).UpdatePurchase(ctx, req.(*UpdatePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WareRpc_ServiceDesc is the grpc.ServiceDesc for WareRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WareRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ware.WareRpc",
	HandlerType: (*WareRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWareInfoList",
			Handler:    _WareRpc_GetWareInfoList_Handler,
		},
		{
			MethodName: "SaveWare",
			Handler:    _WareRpc_SaveWare_Handler,
		},
		{
			MethodName: "GetSkuWareInfo",
			Handler:    _WareRpc_GetSkuWareInfo_Handler,
		},
		{
			MethodName: "GetSkuHasStock",
			Handler:    _WareRpc_GetSkuHasStock_Handler,
		},
		{
			MethodName: "GetPurchaseDetailInfo",
			Handler:    _WareRpc_GetPurchaseDetailInfo_Handler,
		},
		{
			MethodName: "SavePurchaseDetail",
			Handler:    _WareRpc_SavePurchaseDetail_Handler,
		},
		{
			MethodName: "GetPurchaseList",
			Handler:    _WareRpc_GetPurchaseList_Handler,
		},
		{
			MethodName: "SavePurcase",
			Handler:    _WareRpc_SavePurcase_Handler,
		},
		{
			MethodName: "MergePurchase",
			Handler:    _WareRpc_MergePurchase_Handler,
		},
		{
			MethodName: "GetUnReceivedPurchaseInfo",
			Handler:    _WareRpc_GetUnReceivedPurchaseInfo_Handler,
		},
		{
			MethodName: "ReceivePurchase",
			Handler:    _WareRpc_ReceivePurchase_Handler,
		},
		{
			MethodName: "UpdatePurchase",
			Handler:    _WareRpc_UpdatePurchase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall-demo/micro-mall-ware/proto/micro-mall-ware-proto/ware.proto",
}
